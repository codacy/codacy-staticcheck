[ {
  "patternId" : "SA9001",
  "title" : "`defer`s in `for range` loops may not run when you expect them to",
  "timeToFix" : 5,
  "description" : "`defer`s in `for range` loops may not run when you expect them to"
}, {
  "patternId" : "SA5002",
  "title" : "The empty `for` loop (`for {}`) spins and can block the scheduler",
  "timeToFix" : 5,
  "description" : "The empty `for` loop (`for {}`) spins and can block the scheduler"
}, {
  "patternId" : "SA5005",
  "title" : "The finalizer references the finalized object, preventing garbage collection",
  "timeToFix" : 5,
  "description" : "The finalizer references the finalized object, preventing garbage collection"
}, {
  "patternId" : "SA1003",
  "title" : "Unsupported argument to functions in `encoding/binary`",
  "timeToFix" : 5,
  "description" : "Unsupported argument to functions in `encoding/binary`"
}, {
  "patternId" : "SA1004",
  "title" : "Suspiciously small untyped constant in `time.Sleep`",
  "timeToFix" : 5,
  "description" : "Suspiciously small untyped constant in `time.Sleep`"
}, {
  "patternId" : "SA1005",
  "title" : "Invalid first argument to `exec.Command`",
  "timeToFix" : 5,
  "description" : "Invalid first argument to `exec.Command`"
}, {
  "patternId" : "SA1002",
  "title" : "Invalid format in `time.Parse`",
  "timeToFix" : 5,
  "description" : "Invalid format in `time.Parse`"
}, {
  "patternId" : "SA5004",
  "title" : "`for { select { ...` with an empty default branch spins",
  "timeToFix" : 5,
  "description" : "`for { select { ...` with an empty default branch spins"
}, {
  "patternId" : "SA5003",
  "title" : "Defers in infinite loops will never execute",
  "timeToFix" : 5,
  "description" : "Defers in infinite loops will never execute"
}, {
  "patternId" : "SA4004",
  "title" : "The loop exits unconditionally after one iteration",
  "timeToFix" : 5,
  "description" : "The loop exits unconditionally after one iteration"
}, {
  "patternId" : "SA4003",
  "title" : "Comparing unsigned values against negative values is pointless",
  "timeToFix" : 5,
  "description" : "Comparing unsigned values against negative values is pointless"
}, {
  "patternId" : "SA4002",
  "title" : "Comparing strings with known different sizes has predictable results",
  "timeToFix" : 5,
  "description" : "Comparing strings with known different sizes has predictable results"
}, {
  "patternId" : "SA4005",
  "title" : "Field assignment that will never be observed. Did you mean to use a pointer receiver?",
  "timeToFix" : 5,
  "description" : "Field assignment that will never be observed. Did you mean to use a pointer receiver?"
}, {
  "patternId" : "SA3001",
  "title" : "Assigning to `b.N` in benchmarks distorts the results",
  "timeToFix" : 5,
  "description" : "Assigning to `b.N` in benchmarks distorts the results"
}, {
  "patternId" : "SA4016",
  "title" : "Certain bitwise operations, such as `x ^ 0`, do not do anything useful",
  "timeToFix" : 5,
  "description" : "Certain bitwise operations, such as `x ^ 0`, do not do anything useful"
}, {
  "patternId" : "SA4011",
  "title" : "Break statement with no effect. Did you mean to break out of an outer loop?",
  "timeToFix" : 5,
  "description" : "Break statement with no effect. Did you mean to break out of an outer loop?"
}, {
  "patternId" : "SA4018",
  "title" : "Self-assignment of variables",
  "timeToFix" : 5,
  "description" : "Self-assignment of variables"
}, {
  "patternId" : "SA4019",
  "title" : "Multiple, identical build constraints in the same file",
  "timeToFix" : 5,
  "description" : "Multiple, identical build constraints in the same file"
}, {
  "patternId" : "SA4010",
  "title" : "The result of `append` will never be observed anywhere",
  "timeToFix" : 5,
  "description" : "The result of `append` will never be observed anywhere"
}, {
  "patternId" : "SA4017",
  "title" : "A pure function's return value is discarded, making the call pointless",
  "timeToFix" : 5,
  "description" : "A pure function's return value is discarded, making the call pointless"
}, {
  "patternId" : "SA3000",
  "title" : "`TestMain` doesn't call `os.Exit`, hiding test failures",
  "timeToFix" : 5,
  "description" : "`TestMain` doesn't call `os.Exit`, hiding test failures"
}, {
  "patternId" : "SA1011",
  "title" : "Various methods in the `strings` package expect valid UTF-8, but invalid input is provided",
  "timeToFix" : 5,
  "description" : "Various methods in the `strings` package expect valid UTF-8, but invalid input is provided"
}, {
  "patternId" : "SA6001",
  "title" : "Missing an optimization opportunity when indexing maps by byte slices",
  "timeToFix" : 5,
  "description" : "Missing an optimization opportunity when indexing maps by byte slices"
}, {
  "patternId" : "SA1016",
  "title" : "Trapping a signal that cannot be trapped",
  "timeToFix" : 5,
  "description" : "Trapping a signal that cannot be trapped"
}, {
  "patternId" : "SA1020",
  "title" : "Using an invalid `host:port` pair with a `net.Listen`-related function",
  "timeToFix" : 5,
  "description" : "Using an invalid `host:port` pair with a `net.Listen`-related function"
}, {
  "patternId" : "SA1018",
  "title" : "`strings.Replace` called with `n == 0`, which does nothing",
  "timeToFix" : 5,
  "description" : "`strings.Replace` called with `n == 0`, which does nothing"
}, {
  "patternId" : "SA2000",
  "title" : "`sync.WaitGroup.Add` called inside the goroutine, leading to a race condition",
  "timeToFix" : 5,
  "description" : "`sync.WaitGroup.Add` called inside the goroutine, leading to a race condition"
}, {
  "patternId" : "SA1019",
  "title" : "Using a deprecated function, variable, constant or field",
  "timeToFix" : 5,
  "description" : "Using a deprecated function, variable, constant or field"
}, {
  "patternId" : "SA2001",
  "title" : "Empty critical section, did you mean to `defer` the unlock?",
  "timeToFix" : 5,
  "description" : "Empty critical section, did you mean to `defer` the unlock?"
}, {
  "patternId" : "SA1021",
  "title" : "Using `bytes.Equal` to compare two `net.IP`",
  "timeToFix" : 5,
  "description" : "Using `bytes.Equal` to compare two `net.IP`"
}, {
  "patternId" : "SA1017",
  "title" : "Channels used with `signal.Notify` should be buffered",
  "timeToFix" : 5,
  "description" : "Channels used with `signal.Notify` should be buffered"
}, {
  "patternId" : "SA6000",
  "title" : "Using `regexp.Match` or related in a loop, should use `regexp.Compile`",
  "timeToFix" : 5,
  "description" : "Using `regexp.Match` or related in a loop, should use `regexp.Compile`"
}, {
  "patternId" : "SA1010",
  "title" : "`(*regexp.Regexp).FindAll` called with `n == 0`, which will always return zero results",
  "timeToFix" : 5,
  "description" : "`(*regexp.Regexp).FindAll` called with `n == 0`, which will always return zero results"
}, {
  "patternId" : "SA5006",
  "title" : "Slice index out of bounds",
  "timeToFix" : 5,
  "description" : "Slice index out of bounds"
}, {
  "patternId" : "SA5001",
  "title" : "Defering `Close` before checking for a possible error",
  "timeToFix" : 5,
  "description" : "Defering `Close` before checking for a possible error"
}, {
  "patternId" : "SA1007",
  "title" : "Invalid URL in `net/url.Parse`",
  "timeToFix" : 5,
  "description" : "Invalid URL in `net/url.Parse`"
}, {
  "patternId" : "SA1000",
  "title" : "Invalid regular expression",
  "timeToFix" : 5,
  "description" : "Invalid regular expression"
}, {
  "patternId" : "SA9002",
  "title" : "Using a non-octal `os.FileMode`  that looks like it was meant to be in octal.",
  "timeToFix" : 5,
  "description" : "Using a non-octal `os.FileMode`  that looks like it was meant to be in octal."
}, {
  "patternId" : "SA1001",
  "title" : "Invalid template",
  "timeToFix" : 5,
  "description" : "Invalid template"
}, {
  "patternId" : "SA1006",
  "title" : "Printf with dynamic first argument and no further arguments",
  "timeToFix" : 5,
  "description" : "Printf with dynamic first argument and no further arguments"
}, {
  "patternId" : "SA5000",
  "title" : "Assignment to nil map",
  "timeToFix" : 5,
  "description" : "Assignment to nil map"
}, {
  "patternId" : "SA5007",
  "title" : "Infinite recursive call",
  "timeToFix" : 5,
  "description" : "Infinite recursive call"
}, {
  "patternId" : "SA1008",
  "title" : "Non-canonical key in `http.Header` map",
  "timeToFix" : 5,
  "description" : "Non-canonical key in `http.Header` map"
}, {
  "patternId" : "SA9003",
  "title" : "Empty body in an if or else branch",
  "timeToFix" : 5,
  "description" : "Empty body in an if or else branch"
}, {
  "patternId" : "SA4009",
  "title" : "A function argument is overwritten before its first use",
  "timeToFix" : 5,
  "description" : "A function argument is overwritten before its first use"
}, {
  "patternId" : "SA4000",
  "title" : "Boolean expression has identical expressions on both sides",
  "timeToFix" : 5,
  "description" : "Boolean expression has identical expressions on both sides"
}, {
  "patternId" : "SA4006",
  "title" : "A value assigned to a variable is never read before being overwritten. Forgotten error check or dead code?",
  "timeToFix" : 5,
  "description" : "A value assigned to a variable is never read before being overwritten. Forgotten error check or dead code?"
}, {
  "patternId" : "SA4001",
  "title" : "`&*x` gets simplified to `x`, it does not copy `x`",
  "timeToFix" : 5,
  "description" : "`&*x` gets simplified to `x`, it does not copy `x`"
}, {
  "patternId" : "SA4008",
  "title" : "The variable in the loop condition never changes, are you incrementing the wrong variable?",
  "timeToFix" : 5,
  "description" : "The variable in the loop condition never changes, are you incrementing the wrong variable?"
}, {
  "patternId" : "SA4012",
  "title" : "Comparing a value against NaN even though no value is equal to NaN",
  "timeToFix" : 5,
  "description" : "Comparing a value against NaN even though no value is equal to NaN"
}, {
  "patternId" : "SA4015",
  "title" : "Calling functions like `math.Ceil` on floats converted from integers doesn't do anything useful",
  "timeToFix" : 5,
  "description" : "Calling functions like `math.Ceil` on floats converted from integers doesn't do anything useful"
}, {
  "patternId" : "SA4014",
  "title" : "An if/else if chain has repeated conditions and no side-effects; if the condition didn't match the first time, it won't match the second time, either",
  "timeToFix" : 5,
  "description" : "An if/else if chain has repeated conditions and no side-effects; if the condition didn't match the first time, it won't match the second time, either"
}, {
  "patternId" : "SA4013",
  "title" : "Negating a boolean twice (`!!b`) is the same as writing `b`. This is either redundant, or a typo.",
  "timeToFix" : 5,
  "description" : "Negating a boolean twice (`!!b`) is the same as writing `b`. This is either redundant, or a typo."
}, {
  "patternId" : "SA1015",
  "title" : "Using `time.Tick` in a way that will leak. Consider using `time.NewTicker`, and only use `time.Tick` in tests, commands and endless functions",
  "timeToFix" : 5,
  "description" : "Using `time.Tick` in a way that will leak. Consider using `time.NewTicker`, and only use `time.Tick` in tests, commands and endless functions"
}, {
  "patternId" : "SA6002",
  "title" : "Storing non-pointer values in `sync.Pool` allocates memory",
  "timeToFix" : 5,
  "description" : "Storing non-pointer values in `sync.Pool` allocates memory"
}, {
  "patternId" : "SA1012",
  "title" : "A nil `context.Context` is being passed to a function, consider using `context.TODO` instead",
  "timeToFix" : 5,
  "description" : "A nil `context.Context` is being passed to a function, consider using `context.TODO` instead"
}, {
  "patternId" : "SA2003",
  "title" : "Deferred `Lock` right after locking, likely meant to defer `Unlock` instead",
  "timeToFix" : 5,
  "description" : "Deferred `Lock` right after locking, likely meant to defer `Unlock` instead"
}, {
  "patternId" : "SA1024",
  "title" : "A string cutset contains duplicate characters, suggesting `TrimPrefix` or `TrimSuffix` should be used instead of `TrimLeft` or `TrimRight`",
  "timeToFix" : 5,
  "description" : "A string cutset contains duplicate characters, suggesting `TrimPrefix` or `TrimSuffix` should be used instead of `TrimLeft` or `TrimRight`"
}, {
  "patternId" : "SA1023",
  "title" : "Modifying the buffer in an `io.Writer` implementation",
  "timeToFix" : 5,
  "description" : "Modifying the buffer in an `io.Writer` implementation"
}, {
  "patternId" : "SA2002",
  "title" : "Called `testing.T.FailNow` or `SkipNow` in a goroutine, which isn't allowed",
  "timeToFix" : 5,
  "description" : "Called `testing.T.FailNow` or `SkipNow` in a goroutine, which isn't allowed"
}, {
  "patternId" : "SA1013",
  "title" : "`io.Seeker.Seek` is being called with the `whence` constant as the first argument, but it should be the second",
  "timeToFix" : 5,
  "description" : "`io.Seeker.Seek` is being called with the `whence` constant as the first argument, but it should be the second"
}, {
  "patternId" : "SA6003",
  "title" : "Converting a string to a slice of runes before ranging over it",
  "timeToFix" : 5,
  "description" : "Converting a string to a slice of runes before ranging over it"
}, {
  "patternId" : "SA1014",
  "title" : "Non-pointer value passed to `Unmarshal` or `Decode`",
  "timeToFix" : 5,
  "description" : "Non-pointer value passed to `Unmarshal` or `Decode`"
} ]